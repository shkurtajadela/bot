from bot.db.db_interface import get_check, get_conn_by_check
from bot.help_func.help_func import calc_paid_sum
from typing import List
from bot.help_func.bot_func import bot, get_username


def show_created_check_info(description: str, check_sum: str = None, own_sum: str = None, requisites: str = None):
    if not check_sum:
        return f'–û–ø–∏—Å–∞–Ω–∏–µ: {description}'
    elif not own_sum:
        return f'–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–°—É–º–º–∞: {check_sum}—Ä'
    elif not requisites:
        return f'–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–°—É–º–º–∞: {own_sum}—Ä/{check_sum}—Ä'
    else:
        return f'–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–°—É–º–º–∞: {own_sum}—Ä/{check_sum}—Ä\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: {requisites}'
    

def show_check_info(check_sum: int, description: str, requisites: str, username: str):
    return f'–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–°—É–º–º–∞: {check_sum}—Ä\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: {requisites}\n–í–ª–∞–¥–µ–ª–µ—Ü: {username}'


def status_emoji(status: str):
    emoji = {
        '0': '‚ùå',
        '1': '‚úÖ'
    }

    return emoji[status]


def sort_conns(conns: List[dict]) -> List[dict]:
    sorted_conns = sorted(conns, key=lambda x: list(map(int, get_check(x['check_id'])['check_date'].split('-')))[::-1],
                          reverse=True)
    return sorted_conns


def sort_checks(checks: List[dict]) -> List[dict]:
    sorted_checks = sorted(checks, key=lambda x: list(map(int, x['check_date'].split('-')))[::-1],
                           reverse=True)
    return sorted_checks


def show_added_checks_info(conns: List[dict]):
    sorted_conns = sort_conns(conns)
    text = ''
    for i, conn in enumerate(sorted_conns):
        check = get_check(conn['check_id'])
        text += f"üßæ –ß–µ–∫ ‚Ññ{i+1}, ID: {check['check_id']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {check['description']}\n–°—É–º–º–∞: {sorted_conns[i]['conn_sum']}—Ä\n–î–∞—Ç–∞: {check['check_date']}\n–°—Ç–∞—Ç—É—Å: {status_emoji(str(sorted_conns[i]['conn_status']))}\n\n"
    return text


def show_my_checks_info(checks: List[dict]):
    sorted_checks= sort_checks(checks)
    text = ''
    for i, check in enumerate(sorted_checks):
        text += f"üßæ –ß–µ–∫ ‚Ññ{i+1}, ID: {check['check_id']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {check['description']}\n–°—É–º–º–∞: {calc_paid_sum(check['check_id'], check['own_sum'])}—Ä/{check['check_sum']}—Ä\n–î–∞—Ç–∞: {check['check_date']}\n\n"
    return text


async def show_check_conns_info(conns: List[dict], check_id: str):
    check = get_check(check_id)
    text = f"–û–ø–∏—Å–∞–Ω–∏–µ: {check['description']}\n–°—É–º–º–∞: {calc_paid_sum(check['check_id'], check['own_sum'])}—Ä/{check['check_sum']}—Ä"
    if len(conns) > 0:
        text += "\n\n–î–æ–ª–∂–Ω–∏–∫–∏ —ç—Ç–æ–≥–æ —á–µ–∫–∞:\n"
        for j in range(len(conns)):
            username = await get_username(chat_id=conns[j]['user_id'])
            text += f"{username} {status_emoji(str(conns[j]['conn_status']))}"
            if conns[j]['conn_sum']:
                text += f" - {conns[j]['conn_sum']}—Ä"
            text += '\n'
    else:
        text += "\n\n–ï—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª—Å—è –≤ –≤–∞—à —á–µ–∫"
    return text